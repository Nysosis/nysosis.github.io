{"version":3,"sources":["lib/useInterval.ts","Dial/Dial.tsx","Dial/index.tsx","lib/useEasing.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["noOpCallback","useInterval","callback","delay","savedCallback","useRef","useEffect","current","undefined","id","setInterval","clearInterval","describeArc","x","y","radius","startAngle","endAngle","polarToCartesian","centerX","centerY","angleInDegrees","angleInRadians","Math","PI","cos","sin","start","end","arcSweep","join","Arm","dialHeight","dialWidth","props","className","d","fill","cx","cy","r","Dial","progressAsDegrees","progress","viewBox","xmlns","transform","style","Object","keys","eases","_progress","useEasing","finalValue","duration","easing","easingFn","applyEasing","multiplier","ticker","Date","valueOf","diff","buildTimeout","timeout","window","setTimeout","now","clearTimeout","remainder","InitialiseCounter","progressInYear","year","startOfYear","endOfYear","value","Error","startupTime","startupProgress","getFullYear","startupProgressValue","App","useState","currentYear","setCurrentYear","progressInThisYear","setProgress","tickDuration","setTickDuration","progressValue","width","toFixed","replace","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAEMA,G,MAAe,cAEd,SAASC,EAAYC,EAA+BC,GACzD,IAAMC,EAAgBC,mBAGtBC,qBAAU,WACRF,EAAcG,QAAUL,IACvB,CAACA,IAGJI,qBAAU,WAKR,QAAcE,IAAVL,EAAqB,CACvB,IAAIM,EAAKC,aALX,YACGN,EAAcG,SAAWP,OAICG,GAC3B,OAAO,kBAAMQ,cAAcF,OAE5B,CAACN,IAGSF,I,aCrBf,SAASW,EAAYC,EAAWC,EAAWC,EAAgBC,EAAoBC,GAC9E,SAASC,EAAiBC,EAAiBC,EAAiBL,EAAgBM,GAC3E,IAAIC,GAAkBD,EAAiB,IAAME,KAAKC,GAAK,IAEvD,MAAO,CACNX,EAAGM,EAAWJ,EAASQ,KAAKE,IAAIH,GAChCR,EAAGM,EAAWL,EAASQ,KAAKG,IAAIJ,IAIlC,IAAIK,EAAQT,EAAiBL,EAAGC,EAAGC,EAAQE,GACvCW,EAAMV,EAAiBL,EAAGC,EAAGC,EAAQC,GAErCa,EAAWZ,EAAWD,GAAc,IAAM,IAAM,IASpD,MAPQ,CACP,IAAKW,EAAMd,EAAGc,EAAMb,EACpB,IAAKC,EAAQA,EAAQ,EAAGc,EAAU,EAAGD,EAAIf,EAAGe,EAAId,EAChD,IAAKD,EAAGC,EACR,IAAKa,EAAMd,EAAGc,EAAMb,GACnBgB,KAAK,KAKR,IAAMC,EAAyF,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,UAAcC,EAA7B,iDAAyC,qCAAGC,UAAU,OAAUD,GAC9J,0BAAME,EAAC,YAAOH,EAAP,kBAA0BD,EAA1B,aAAyCC,EAAzC,OAAyDI,KAAK,UACrE,4BAAQC,GAAG,IAAIC,GAAG,IAAIC,EAAGP,EAAWI,KAAK,YC7B3BI,EDgC8B,SAAC,GAAkB,IAEzDC,EAAgC,IAFwB,EAAfC,SAEF,IAG7C,OAAO,yBAAKR,UAAU,OAAOS,QAAQ,cAAcC,MAAM,8BACxD,4BAAQV,UAAU,OAAOG,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC3C,0BAAML,UAAU,WAAWC,EAAGxB,EAAY,GAAI,GAN5B,GAM4C,EAAG8B,KACjE,uBAAGI,UAAU,qBACZ,kBAAC,EAAD,CAAKb,UANW,EAMWD,WARV,GAQkCe,MAAO,CAACD,UAAU,UAAD,OAAYJ,EAAZ,WACpE,4BAAQF,EAAGP,IAAeI,KAAK,c,gBErC5BrC,GAHsBgD,OAAOC,KAAKC,KAGK,SAACC,MA6D/BC,MAnBR,SAAmBlD,EAAkCmD,EAAoBC,EAAkBC,GACjG,IAAMC,EAAWN,IAAMK,GACjBnD,EAAgBC,mBAGrBC,qBAAU,WACRF,EAAcG,QAAUL,IACxB,CAACA,IAGHI,qBAAU,WAKV,OAvDF,SAA2B+C,EAAoBC,EAAkBC,GAChE,IAAME,EAAc,SAACd,GACpB,IAAMe,EAAaH,EAAOZ,GAE1B,OAAOU,EAAaK,GAGrB,OAAO,SAACxD,GACP,IAKIyD,EAJEhC,GAAS,IAAIiC,MAAQC,UACrBjC,EAAO,IAAIgC,KAAKjC,EAAQ2B,GAAWO,UACnCC,EAAOlC,EAAMD,EAyBnB,OAHAzB,EAAS,GACTyD,EAnBA,SAASI,EAAaC,GACrB,OAAOC,OAAOC,YAAY,WACzB,IAAMC,GAAO,IAAIP,MAAQC,UACzB,GAAIM,EAAMvC,EAGT,OAFAwC,aAAaT,QACbzD,EAASmD,GAKVnD,EAASuD,GADSU,EAAMxC,GAASmC,IAEjC,IAAMO,EAAYzC,EAAMuC,EAGxBR,EAASI,EADaM,GAAaL,EAAUA,EAAUK,KAEpDL,GAIID,CA1Bc,IA4BhB,kBAAMK,aAAaT,KAmBnBW,CAAkBjB,EAAYC,EAAUE,EAAxCc,EAJL,SAAc3B,IACXvC,EAAcG,SAAWP,GAAc2C,QAIzC,CAACU,EAAYC,EAAUE,KCjD5B,SAASe,EAAeC,GACvB,IAX0B7C,EAAeC,EAWnC6C,EAAc,IAAIb,KAAKY,EAAM,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGX,UAC/Ca,EAAY,IAAId,KAAKY,EAAO,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGX,UAAY,EAEnE,OAd0BlC,EAcD8C,EAAYZ,UAdIjC,EAcO8C,EAAUb,UAbnD,SAACc,GACP,GAAIA,EAAQhD,GAASgD,EAAQ/C,EAC5B,MAAM,IAAIgD,MAAJ,iBAAoBD,EAApB,+BAAgDhD,EAAhD,YAAyDC,IAGhE,OAAQ+C,EAAQhD,IAAUC,EAAMD,IAWlC,IAAMkD,EAAc,IAAIjB,KAElBkB,EAAkBP,EAAeM,EAAYE,eAC7CC,EAAuBF,EAAgBD,EAAYhB,WA4C1CoB,EAzCO,WAAO,IAAD,EACWC,mBAASL,EAAYE,eADhC,mBACpBI,EADoB,KACPC,EADO,KAErBC,EAAqBhF,iBAAOyE,GAFP,EAGKI,mBAAS,GAHd,mBAGpBvC,EAHoB,KAGV2C,EAHU,OAKaJ,wBAA6B1E,GAL1C,mBAKpB+E,EALoB,KAKNC,EALM,KA0B3B,OAnBApC,GAAU,SAACT,GACV2C,EAAY3C,GACRA,GAAYqC,GACfQ,EAZe,OAcdR,EAjB+B,IAiBmB,cAErD/E,GAAY,WACX,IAAMkE,EAAM,IAAIP,KACZO,EAAIY,gBAAkBI,IACzBC,EAAejB,EAAIY,eACnBM,EAAmB9E,QAAUgE,EAAeJ,EAAIY,gBAGjD,IAAMU,EAAgBJ,EAAmB9E,QAAQ4D,EAAIN,WAErDyB,EAAYG,KACVF,GAGF,yBAAKpD,UAAU,OACd,4BAAQA,UAAU,cACjB,sDAA6BgD,EAA7B,KACA,yBAAKpC,MAAO,CAAE2C,MAAO,QACpB,kBAAC,EAAD,CAAM/C,SAAUA,KAEjB,oCACoB,IAAXA,GAAgBgD,QAAQ,GAAGC,QAAQ,QAAS,IADrD,wBACiFT,EADjF,QClDgBU,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.998e3bcd.chunk.js","sourcesContent":["import { useEffect, useRef } from 'react';\r\n\r\nconst noOpCallback = () => {};\r\n\r\nexport function useInterval(callback: typeof noOpCallback, delay: number | undefined) {\r\n  const savedCallback = useRef<Function>();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      (savedCallback.current || noOpCallback)();\r\n\t\t}\r\n\r\n    if (delay !== undefined) {\r\n      let id = setInterval(tick, delay);\r\n      return () => clearInterval(id);\r\n    }\r\n  }, [delay]);\r\n}\r\n\r\nexport default useInterval;\r\n","import React, { SVGAttributes } from 'react';\r\nimport './Dial.scss';\r\n\r\n// Taken from https://stackoverflow.com/a/24569190\r\nfunction describeArc(x: number, y: number, radius: number, startAngle: number, endAngle: number) {\r\n\tfunction polarToCartesian(centerX: number, centerY: number, radius: number, angleInDegrees: number) {\r\n\t\tvar angleInRadians = (angleInDegrees - 90) * Math.PI / 180.0;\r\n\r\n\t\treturn {\r\n\t\t\tx: centerX + (radius * Math.cos(angleInRadians)),\r\n\t\t\ty: centerY + (radius * Math.sin(angleInRadians))\r\n\t\t};\r\n\t}\r\n\r\n\tvar start = polarToCartesian(x, y, radius, endAngle);\r\n\tvar end = polarToCartesian(x, y, radius, startAngle);\r\n\r\n\tvar arcSweep = endAngle - startAngle <= 180 ? \"0\" : \"1\";\r\n\r\n\tvar d = [\r\n\t\t\"M\", start.x, start.y,\r\n\t\t\"A\", radius, radius, 0, arcSweep, 0, end.x, end.y,\r\n\t\t\"L\", x, y,\r\n\t\t\"L\", start.x, start.y\r\n\t].join(\" \");\r\n\r\n\treturn d;\r\n}\r\n\r\nconst Arm: React.FC<{ dialWidth: number; dialHeight: number; } & SVGAttributes<SVGGElement>> = ({ dialHeight, dialWidth, ...props }) => <g className=\"arm\" {...props}>\r\n\t<path d={`M-${dialWidth} 0 L0 -${dialHeight} L${dialWidth} 0Z`} fill=\"black\" />\r\n\t<circle cx=\"0\" cy=\"0\" r={dialWidth} fill=\"black\" />\r\n</g>;\r\n\r\nconst Dial: React.FC<{ progress: number }> = ({ progress }) => {\r\n\tconst fillHeight = 43;\r\n\tconst progressAsDegrees = (progress * 360) % 360;\r\n\tconst dialWidth = 3;\r\n\r\n\treturn <svg className=\"dial\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n\t\t<circle className=\"face\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n\t\t<path className=\"progress\" d={describeArc(50, 50, fillHeight, 0, progressAsDegrees)} />\r\n\t\t<g transform=\"translate(50, 50)\">\r\n\t\t\t<Arm dialWidth={dialWidth} dialHeight={fillHeight} style={{transform: `rotate(${progressAsDegrees}deg)`}} />\r\n\t\t\t<circle r={dialWidth / 2} fill=\"silver\" />\r\n\t\t</g>\r\n\t</svg>;\r\n}\r\n\r\nexport default Dial;","import Dial from './Dial';\r\n\r\nexport default Dial;\r\n","import { useEffect, useRef } from 'react';\r\nimport eases from 'eases';\r\n\r\nexport type ValidEasingsType = keyof typeof eases;\r\nexport const ValidEasings = Object.keys(eases) as ReadonlyArray<ValidEasingsType>;\r\n\r\ntype EasingProgressCallback = (progress: number) => void;\r\nconst noOpCallback: EasingProgressCallback = (_progress: number) => {};\r\n\r\nfunction InitialiseCounter(finalValue: number, duration: number, easing: (progress: number) => number) {\r\n\tconst applyEasing = (progress: number) => {\r\n\t\tconst multiplier = easing(progress);\r\n\r\n\t\treturn finalValue * multiplier;\r\n\t};\r\n\r\n\treturn (callback: (val: number) => void) => {\r\n\t\tconst intervalPeriod = 10;\r\n\t\tconst start = (new Date()).valueOf();\r\n\t\tconst end = (new Date(start + duration)).valueOf();\r\n\t\tconst diff = end - start;\r\n\r\n\t\tlet ticker: number;\r\n\r\n\t\tfunction buildTimeout(timeout: number) {\r\n\t\t\treturn window.setTimeout((() => {\r\n\t\t\t\tconst now = (new Date()).valueOf();\r\n\t\t\t\tif (now > end) {\r\n\t\t\t\t\tclearTimeout(ticker);\r\n\t\t\t\t\tcallback(finalValue);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst progress = (now - start) / diff;\r\n\t\t\t\tcallback(applyEasing(progress));\r\n\t\t\t\tconst remainder = end - now;\r\n\r\n\t\t\t\tlet resolvedTimeout = remainder >= timeout ? timeout : remainder;\r\n\t\t\t\tticker = buildTimeout(resolvedTimeout);\r\n\t\t\t}), timeout);\r\n\t\t}\r\n\r\n\t\tcallback(0);\r\n\t\tticker = buildTimeout(intervalPeriod);\r\n\r\n\t\treturn () => clearTimeout(ticker);\r\n\t}\r\n}\r\n\r\nexport function useEasing(callback: EasingProgressCallback, finalValue: number, duration: number, easing: ValidEasingsType) {\r\n\tconst easingFn = eases[easing];\r\n\tconst savedCallback = useRef<Function>();\r\n\r\n  // Remember the latest callback.\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n\t}, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick(progress: number) {\r\n      (savedCallback.current || noOpCallback)(progress);\r\n\t\t}\r\n\r\n\t\treturn InitialiseCounter(finalValue, duration, easingFn)(tick);\r\n  }, [finalValue, duration, easingFn]);\r\n}\r\n\r\nexport default useEasing;\r\n","import React, { useState, useRef } from 'react';\nimport './App.scss';\nimport { useInterval } from './lib/useInterval';\nimport Dial from './Dial';\nimport useEasing from './lib/useEasing';\n\nfunction percentageBetween(start: number, end: number) {\n\treturn (value: number) => {\n\t\tif (value < start || value > end) {\n\t\t\tthrow new Error(`value '${value}' is out of bounds: ${start}:${end}`);\n\t\t}\n\n\t\treturn (value - start) / (end - start);\n\t}\n}\n\nfunction progressInYear(year: number) {\n\tconst startOfYear = new Date(year, 0, 1, 0, 0, 0, 0).valueOf();\n\tconst endOfYear = new Date(year + 1, 0, 1, 0, 0, 0, 0).valueOf() - 1;\n\n\treturn percentageBetween(startOfYear.valueOf(), endOfYear.valueOf());\n}\n\nconst startupTime = new Date();\nconst startupSpeedInMilliSeconds = 1000;\nconst startupProgress = progressInYear(startupTime.getFullYear());\nconst startupProgressValue = startupProgress(startupTime.valueOf());\nconst tickSpeed = 1000;\n\nconst App: React.FC = () => {\n\tconst [currentYear, setCurrentYear] = useState(startupTime.getFullYear());\n\tconst progressInThisYear = useRef(startupProgress);\n\tconst [progress, setProgress] = useState(0);\n\n\tconst [tickDuration, setTickDuration] = useState<number | undefined>(undefined);\n\n\tuseEasing((progress) => {\n\t\tsetProgress(progress);\n\t\tif (progress >= startupProgressValue) {\n\t\t\tsetTickDuration(tickSpeed);\n\t\t}\n\t}, startupProgressValue, startupSpeedInMilliSeconds, 'cubicInOut');\n\n\tuseInterval(() => {\n\t\tconst now = new Date();\n\t\tif (now.getFullYear() !== currentYear) {\n\t\t\tsetCurrentYear(now.getFullYear());\n\t\t\tprogressInThisYear.current = progressInYear(now.getFullYear());\n\t\t}\n\n\t\tconst progressValue = progressInThisYear.current(now.valueOf());\n\n\t\tsetProgress(progressValue);\n\t}, tickDuration);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<h1>How far are we through { currentYear }?</h1>\n\t\t\t\t<div style={{ width: \"25%\" }}>\n\t\t\t\t\t<Dial progress={progress} />\n\t\t\t\t</div>\n\t\t\t\t<p>\n\t\t\t\t\tIt's { (progress * 100).toFixed(5).replace(/\\.0+$/, '') }% of the way through { currentYear }!\n\t\t\t\t</p>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}